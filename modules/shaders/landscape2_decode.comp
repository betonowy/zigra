#version 450

#include <gen/landscape/Cells.glsl>

layout (binding = 0, r16ui) uniform readonly uimage2D img_in_encoded;
layout (binding = 1, rgba16f) uniform writeonly image2D img_out_albedo;
layout (binding = 2, rgba16f) uniform writeonly image2D img_out_src_light;
layout (binding = 3, rgba16f) uniform writeonly image2D img_out_spread;

vec4 getColor(uint code) {
    uint type = code & 0xff;

    // bkg dependent rendering
    switch (type) {
        case CellType_air: return vec4(0);
    }

    uint property_1 = code >> 8 & 0xf;
    uint property_2 = code >> 12 & 0xf;

    // bkg independent rendering
    switch (type | 0x80) {
        case CellType_bkg: return vec4(0.025, 0.0125, 0.00625, 1.0);
        case CellType_soil: return vec4(0.1, 0.05, 0.025, 1.0);
        case CellType_gold: return vec4(0.5, 0.25, 0.0, 1.0);
        case CellType_rock: return vec4(0.25, 0.25, 0.25, 1.0);
        case CellType_water: return vec4(0.1, 0.2, 0.5, 1.0);
        case CellType_acid: return vec4(0.0125, 0.5, 0.025, 1.0);
        case CellType_sand: return vec4(0.5, 0.45, 0.25, 1.0);
    }

    return vec4(1, 0, 1, 1);
}

vec4 getSrcLight(uint code) {
    uint type = code & 0xff;

    // bkg dependent rendering
    switch (type) {
        case CellType_air: return vec4(1.0, 1.0, 1.0, 0.999);
    }

    uint property_1 = code >> 8 & 0xf;
    uint property_2 = code >> 12 & 0xf;

    const vec4 solid_src_light = vec4(0.9, 0.9, 0.9, 0.0);

    // bkg independent rendering
    switch (type | 0x80) {
        case CellType_bkg: return vec4(0.9999, 0.9999, 0.9999, 0.01);
        case CellType_soil: return solid_src_light;
        case CellType_gold: return solid_src_light;
        case CellType_rock: return solid_src_light;
        case CellType_water: return vec4(0.5, 0.8, 0.999, 0.0);
        case CellType_acid: return vec4(0.5, 0.999, 0.3, 0.0);
        case CellType_sand: return solid_src_light;
    }

    return solid_src_light;
}

void main() {
    uint code = imageLoad(img_in_encoded, ivec2(gl_GlobalInvocationID.xy)).r;

    vec4 color = getColor(code);
    vec4 light = getSrcLight(code);

    imageStore(img_out_albedo, ivec2(gl_GlobalInvocationID.xy), color);
    imageStore(img_out_src_light, ivec2(gl_GlobalInvocationID.xy), light);
}
