#version 450
#extension GL_EXT_nonuniform_qualifier : require

#include <ubo.glsl>

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, std140) uniform UBO_DEF ubo;
layout(binding = 1) uniform sampler2DArray tex_atlas[];
layout(binding = 2, rgba16f) uniform image2D img_bkg;

vec4 sampleAtlas(UboTexRef ref, ivec2 coord) {
    ivec2 frame = textureSize(tex_atlas[ref.layer], 0).xy;

    coord += frame >> 1;
    coord.x = coord.x % frame.x;
    coord.y = clamp(coord.y, 0, frame.y - 1);

    return texelFetch(tex_atlas[ref.layer], ivec3(coord, ref.index), 0);
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);

    for (uint i = 0; i < ubo.background.count; ++i) {
        UboBackgroundEntry entry = ubo.background.entries[i];

        vec2 influence = vec2(ubo.camera_pos) * entry.influence - entry.offset;
        ivec2 sample_coord = coord + ivec2(influence) - ivec2(ubo.target_size >> 1);
        vec4 atlas_col = sampleAtlas(entry.tex, sample_coord);

        if (atlas_col.a > 0.5) {
            color = vec4(atlas_col.rgb, 1.0);
            break;
        }
    }

    imageStore(img_bkg, coord, color);
}
